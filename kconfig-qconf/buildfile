# @@ TODO: optional metadata
#
#import! [metadata=optional] moc = Qt6Moc%exe{qt6moc}

import libs = liblkc%lib{lkc}

switch $config.kconfig_qconf.qt
{
  case 5
  {
    import! moc = Qt5Moc%exe{qt5moc}

    import libs += libQt5Core%lib{Qt5Core}
    import libs += libQt5Gui%lib{Qt5Gui}
    import libs += libQt5Widgets%lib{Qt5Widgets}
  }
  case 6
  {
    import! moc = Qt6Moc%exe{qt6moc}

    import libs += libQt6Core%lib{Qt6Core}
    import libs += libQt6Gui%lib{Qt6Gui}
    import libs += libQt6Widgets%lib{Qt6Widgets}
  }
}

./: exe{kconfig-qconf} doc{README.md} legal{LICENSE} manifest

# The "metadata library": its purpose is to make sure all the imported
# libraries are resolved for the ad hoc moc recipe below.
#
[rule_hint=cxx] libue{qconf-meta}: $libs

exe{kconfig-qconf}: {hxx cxx}{qconf} cxx{qconf-moc} {h c}{images} \
  h{lkc expr} libue{qconf-meta} testscript

# @@ TMP install issue, fixed in 0.17.0.
#
#\
cxx{qconf-moc}: hxx{qconf} $moc
{{
  diag moc ($<[0]) -> $>
  $moc -o $path($>) $path($<[0])
}}
#\

#\
cxx{qconf-moc}: hxx{qconf} libue{qconf-meta} $moc
{{
  l = ($<[1])
  o = $path($>)
  t = $(o).t

  # While it's unlikely any moc-relevant stuff will depend on any included
  # headers, just in case let's do this properly and track all the header
  # dependencies.
  #
  lib_poptions = $cxx.lib_poptions($l)
  depdb hash $lib_poptions

  depdb dyndep --byproduct --what=header --default-type=h \
    --update-exclude $l --file $t

  s = $path($<[0])
  sys_poptions = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')

  diag moc ($<[0]) -> $>

  # Use -f to override the path moc uses to #include the input file, which is
  # relative to the output directory, with just the name of the input file.
  #
  $moc $cc.poptions $cxx.poptions $lib_poptions $sys_poptions \
    -f $leaf($s) --output-dep-file --dep-file-path $t -o $o $s
}}
#\

cxx{qconf-moc}: hxx{qconf}
cxx{qconf-moc}: libue{qconf-meta}: update = unmatch
cxx{qconf-moc}: $moc
{{
  l = ($<[1])
  o = $path($>)
  t = $(o).t

  # While it's unlikely any moc-relevant stuff will depend on any included
  # headers, just in case let's do this properly and track all the header
  # dependencies.
  #
  lib_poptions = $cxx.lib_poptions($l)
  depdb hash $lib_poptions

  depdb dyndep --byproduct --what=header --default-type=h \
     --file $t

  s = $path($<[0])
  sys_poptions = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')

  diag moc ($<[0]) -> $>

  # Use -f to override the path moc uses to #include the input file, which is
  # relative to the output directory, with just the name of the input file.
  #
  $moc $cc.poptions $cxx.poptions $lib_poptions $sys_poptions \
    -f $leaf($s) --output-dep-file --dep-file-path $t -o $o $s
}}

# @@ Need to investigate why.
#
obj{qconf qconf-moc}: cc.reprocess = true

cc.poptions =+ "-I$out_base" "-I$src_base"

# Disable warnings.
#
switch $cxx.class
{
  case 'gcc'
    cc.coptions += -Wno-extra -Wno-error

  case 'msvc'
    cc.coptions += /w
}

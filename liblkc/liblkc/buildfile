import? flex  = flex%exe{flex}
import? bison = bison%exe{bison}

define y: file
y{*}: extension = y

define l: file
l{*}: extension = l

lib{lkc}: {h c}{** -menu -parser.tab... -lexer.lex... -version} \
          {h c}{parser.tab...} c{lexer.lex...} h{version}
lib{lkc}: c{menu}: include = adhoc # Included by parser.y.

if ($flex != [null] && $bison != [null])
{
  # Note: the kernel's makefile (Makefile.host) always passes -t (instrument
  # the parser for tracing) and -l/-L (don't generate #line directives). It's
  # not clear whether/why we would want the same. To start let's keep them
  # (we've confirmed -t doesn't seem to have any effect on performance).
  #
  #
  <{h c}{parser.tab...}>: y{parser} $bison
  {{
    diag bison ($<[0])
    $bison "--defines=$path($>[0])" "--output=$path($>[1])" -t -l $path($<[0])
  }}

  c{lexer.lex...}: l{lexer} h{parser.tab...} $flex
  {{
    diag flex ($<[0])
    $flex -o $path($>) -L $path($<[0])
  }}

  {h c}{parser.tab...} c{lexer.lex...}:
  {
    # Include the generated files into the distribution and don't remove them
    # when cleaning in src (so that clean results in a state identical to
    # distributed).
    #
    dist  = true
    clean = ($src_root != $out_root)

    # Backlink in the source directory for convenience of development.
    #
    backlink = true
  }
}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
h{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
c.poptions =+ "-I$out_root" "-I$src_root" "-I$out_base" "-I$src_base"

# Make autoconfig support disabled by default.
#
c.poptions += -DKCONFIG_AUTOCONFIG=NULL

obja{*}: c.poptions += -DLIBLKC_STATIC_BUILD
objs{*}: c.poptions += -DLIBLKC_SHARED_BUILD

if ($c.class == 'gcc')
  c.coptions += -Wno-extra -Wno-error -Wmissing-prototypes -Wstrict-prototypes

# Export options.
#
# Note: -I$*_root should be sufficient since public headers do not include
#       generated headers.
#
lib{lkc}:  c.export.poptions = "-I$out_root" "-I$src_root"
liba{lkc}: c.export.poptions += -DLIBLKC_STATIC
libs{lkc}: c.export.poptions += -DLIBLKC_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{lkc}: bin.lib.version = @"-$version.project_id"
else
  lib{lkc}: bin.lib.version = @"-$version.major.$version.minor"

# Install only the public headers and into the liblkc/ subdirectory of, say,
# /usr/include/ recreating subdirectories.
#
h{*}: install = false
h{lkc}@./ h{lkc_proto}@./ h{expr}@./ h{version}:
{
  install         = include/liblkc/
  install.subdirs = true
}

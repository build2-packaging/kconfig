import! [metadata] yacc = byacc%exe{byacc}
import! [metadata] flex = reflex%exe{reflex}

define y: file
y{*}: extension = y

define l: file
l{*}: extension = l

windows = ($c.target.class == 'windows')

lib{lkc}: libul{lkc}: {h c}{* -menu -parser.tab... -lexer.lex... -version} \
                      {h c}{parser.tab...} c{lexer.lex...} h{version}
libul{lkc}: c{menu}:          include = adhoc # Included by parser.y.
lib{lkc}: regex/{h c}{regex}: include = $windows
libs{lkc}: def{lkc}:          include = $windows
def{lkc}: libul{lkc}

# Note: the kernel's makefile (Makefile.host) always passes -t (instrument the
# parser for tracing) and -l/-L (don't generate #line directives). It's not
# clear whether/why we would want the same. To start let's keep them (we've
# confirmed -t doesn't seem to have any effect on performance).
#
<{h c}{parser.tab...}>: y{parser} $yacc
{{
  diag yacc ($<[0])
  $yacc -l -t "--defines=$path($>[0])" -o $path($>[1]) $path($<[0])
}}

# Note: if using "new" flex, we should pass -f to generate faster scanner.
#
c{lexer.lex...}: l{lexer} h{parser.tab...} $flex
{{
  diag lex ($<[0])
  $flex -L -o $path($>) $path($<[0])
}}

# Backlink in the source directory for convenience of development.
#
{h c}{parser.tab...} c{lexer.lex...}: backlink = true

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
h{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
c.poptions =+ "-I$out_root" "-I$src_root" "-I$out_base" "-I$src_base"

if $windows
  c.poptions =+ "-I($src_base/regex)"

# Make autoconfig support disabled by default.
#
c.poptions += -DKCONFIG_AUTOCONFIG=NULL

obja{*}: c.poptions += -DLIBLKC_STATIC_BUILD
objs{*}: c.poptions += -DLIBLKC_SHARED_BUILD

regex/obj{regex}: c.poptions += -DSTDC_HEADERS -DREGEX_MALLOC

# Disable warnings.
#
switch $c.class
{
  case 'gcc'
  {
    c.coptions += -Wno-extra -Wno-error

    if $windows
      c.coptions += -Wno-deprecated-declarations

    obj{lexer.lex...}: c.coptions += -Wno-unused-function -Wno-unused-label
  }

  case 'msvc'
    c.coptions += /w
}

# Export options.
#
# Note: -I$*_root should be sufficient since public headers do not include
#       generated headers.
#
lib{lkc}:  c.export.poptions = "-I$out_root" "-I$src_root"
liba{lkc}: c.export.poptions += -DLIBLKC_STATIC
libs{lkc}: c.export.poptions += -DLIBLKC_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{lkc}: bin.lib.version = @"-$version.project_id"
else
  lib{lkc}: bin.lib.version = @"-$version.major.$version.minor"

# Install only the public headers and into the liblkc/ subdirectory of, say,
# /usr/include/ recreating subdirectories.
#
h{*}: install = false
h{lkc}@./ h{lkc_proto}@./ h{expr}@./ h{list}@./ h{export}@./ h{version}:
{
  install         = include/liblkc/
  install.subdirs = true
}
